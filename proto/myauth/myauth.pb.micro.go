// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/myauth/myauth.proto

package go_micro_api_myauth

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	proto1 "github.com/micro/go-micro/v2/api/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Myauth service

func NewMyauthEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Myauth service

type MyauthService interface {
	Call(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	GetJwt(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
	InspectJwt(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
}

type myauthService struct {
	c    client.Client
	name string
}

func NewMyauthService(name string, c client.Client) MyauthService {
	return &myauthService{
		c:    c,
		name: name,
	}
}

func (c *myauthService) Call(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Myauth.Call", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myauthService) GetJwt(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Myauth.GetJwt", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myauthService) InspectJwt(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Myauth.InspectJwt", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Myauth service

type MyauthHandler interface {
	Call(context.Context, *proto1.Request, *proto1.Response) error
	GetJwt(context.Context, *proto1.Request, *proto1.Response) error
	InspectJwt(context.Context, *proto1.Request, *proto1.Response) error
}

func RegisterMyauthHandler(s server.Server, hdlr MyauthHandler, opts ...server.HandlerOption) error {
	type myauth interface {
		Call(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		GetJwt(ctx context.Context, in *proto1.Request, out *proto1.Response) error
		InspectJwt(ctx context.Context, in *proto1.Request, out *proto1.Response) error
	}
	type Myauth struct {
		myauth
	}
	h := &myauthHandler{hdlr}
	return s.Handle(s.NewHandler(&Myauth{h}, opts...))
}

type myauthHandler struct {
	MyauthHandler
}

func (h *myauthHandler) Call(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.MyauthHandler.Call(ctx, in, out)
}

func (h *myauthHandler) GetJwt(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.MyauthHandler.GetJwt(ctx, in, out)
}

func (h *myauthHandler) InspectJwt(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.MyauthHandler.InspectJwt(ctx, in, out)
}
